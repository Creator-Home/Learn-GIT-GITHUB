Must Git Commands for every Developer

1-> git init   (create new repository)
2-> git status  (returns staging area)
3-> git add directive_guide.txt  (add file to staging area)
4-> touch file_name.extension  (to create new file)
5-> git add . (for adding every untracked file to staging area)
6-> git rm -f filename.extension (forcefully remove(completely delete) the file)
7-> git rm --cached filename.extension (remove the file from staging area or untracked it)
8-> git config --global user.email "vivekrajs3999@gmail.com"
9-> git config --global user.name "VRS-3999"
10-> git --help
11-> git commit --help
12-> git commit -m "your messege"  (it keep record of your changes)
13-> git commit -a -m "your messege" (committing untracked files)
14-> git log  (displays all your commit)
15-> git checkout logid  (go back in time temporary at any commit)
16-> git checkout master  (switch back to original branch)
17-> git revert LOGID  (get back you in time permanentaly but for a single commit)
18-> git log --oneline (displays all the message of all the commit at once)
19-> git reset --hard LOGID (take back in time mulpile commit and set that as working directory and removes files and all the changes made after the selected LOGID)
20-> git reset --soft LOGID (it makes your working directory in past time without removing any file and changes)
21-> git reset --mixed LODID ((it makes your working directory in past time without removing any file but changes that are made are removed)
22-> touch .gitignore (enter the names of file you want to ignore)
23-> git rm -r --cached .  (to make .gitignore work and for removing the track of the ignored file)
24-> git branch branchName  (create newbrach)
25-> git checkout -b branchName  (create new branch and switch to it)
26-> git branch -a (list all the branch)
27-> git branch -d branchName (delete the branch)
28-> git merge branchName  (it merge branch to the current one)

29-> forking (playing with other repositories)
30-> download (.git is missing from source)

31-> mkdir (to create new folder)
32-> git remote add origin httpURL (connecting local origin to a link to access to your repository)
33-> git remote -v (displays available function such as fetch/push)

34-> add README.md
35-> add LICENSE

36-> git pull  (it will pull all the data and update our local repositories)
37-> git pull <remote> <branchName>  ( it will pull data from particular branch and will update particular branch in local repositories,  remote = origin, branchName = master)
38-> git branch --set-upstream-to=origin/<branch> master   (set tracking information for this branch)
39-> rm -rf fileName   (to remove file)
40-> rmdir fileName    (to remove file)

41-> git push -u origin master   
        git push -u origin master -f
42-> git push --origin delete branchName  (delete branch on github)

43->git commit -S -m "Adding a test file to new_branch"
44->git config user.signingkey 35F5FFB2
45->git config --global user.signingkey 35F5FFB2
46->gpg --list-secret-keys --keyid-format LONG
47->git config --global gpg.program gpg2

In summary, if you want to contribute to a project, the simplest way is to:

    Find a project you want to contribute to
    Fork it
    Clone it to your local system
    Make a new branch
    Make your changes
    Push it back to your repo
    Click the Compare & pull request button
    Click Create pull request to open a new pull request
